--JHARNA DODA
set serveroutput on;

drop table Matrix;

--CREATING A 3*3 MATRIX

CREATE TABLE MATRIX(
SRNO NUMBER,
COLUMN1 VARCHAR(3) ,
COLUMN2 VARCHAR(3) ,
COLUMN3 VARCHAR(3) 
);


--INITIALIZING MATRIX
INSERT INTO MATRIX(SRNO,COLUMN1,COLUMN2,COLUMN3) 
VALUES(1,'_', '_', '_');
INSERT INTO MATRIX(SRNO,COLUMN1,COLUMN2,COLUMN3) 
VALUES(2,'_', '_', '_');
INSERT INTO MATRIX(SRNO,COLUMN1,COLUMN2,COLUMN3) 
VALUES(3,'_','_', '_');

--PROCEDURE TO DISPLAY MATRIX
CREATE OR REPLACE PROCEDURE displayMatrix IS
BEGIN
  dbms_output.put_line(' ');
  FOR i in (SELECT * FROM MATRIX ORDER BY SRNO) LOOP
    dbms_output.put_line('     ' || i.COLUMN1 || ' ' || i.COLUMN2 || ' ' || i.COLUMN3);
  END LOOP; 
  dbms_output.put_line(' ');
END;
/


--PROCEDURE TO INSERT VALUES INTO THE MATRIX IN EACH TURN
CREATE OR REPLACE PROCEDURE PLAY(player CHAR, columnNumber IN NUMBER, rowNumber IN NUMBER) AS
currentValue char;
BEGIN

--COLUMN1
IF columnNumber=1 THEN
SELECT COLUMN1 INTO currentValue FROM MATRIX WHERE SRNO=rowNumber; 
IF currentValue ='X' OR currentValue ='O' THEN --IF CELL ALREADY OCCUPIED
    DBMS_OUTPUT.PUT_LINE('CELL UNREACHABLE, ALREADY OCCUPIED');
ELSE
    UPDATE MATRIX SET COLUMN1=PLAYER WHERE SRNO=rowNumber;
END IF;
END IF;

--COLUMN2
IF columnNumber=2 THEN
SELECT COLUMN2 INTO currentValue FROM MATRIX WHERE SRNO=rowNumber;
IF currentValue ='X' OR currentValue ='O' THEN
    DBMS_OUTPUT.PUT_LINE('CELL UNREACHABLE, ALREADY OCCUPIED');
ELSE
    UPDATE MATRIX SET COLUMN2=PLAYER WHERE SRNO=rowNumber;
END IF;
END IF;


--COLUMN3
IF columnNumber=3 THEN
SELECT COLUMN3 INTO currentValue FROM MATRIX WHERE SRNO=rowNumber;
IF currentValue ='X' OR currentValue ='O' THEN
    DBMS_OUTPUT.PUT_LINE('CELL UNREACHABLE, ALREADY OCCUPIED');
ELSE
    UPDATE MATRIX SET COLUMN3=PLAYER WHERE SRNO=rowNumber;
END IF;
END IF;

displayMatrix();
end;
/

--TRIIGGER AFTER EACH UPDATE TO CHECK FOR WINNINGS
CREATE OR REPLACE TRIGGER Win 
AFTER UPDATE ON MATRIX
DECLARE
X1 VARCHAR(1);
X2 VARCHAR(1);
X3 VARCHAR(1);
Y1 VARCHAR(1);
Y2 VARCHAR(1);
Y3 VARCHAR(1);
Z1 VARCHAR(1);
Z2 VARCHAR(1);
Z3 VARCHAR(1);

BEGIN
SELECT COLUMN1 INTO X1 FROM MATRIX WHERE SRNO=1;
SELECT COLUMN2 INTO X2 FROM MATRIX WHERE SRNO=1;
SELECT COLUMN3 INTO X3 FROM MATRIX WHERE SRNO=1;
SELECT COLUMN1 INTO Y1 FROM MATRIX WHERE SRNO=2;
SELECT COLUMN2 INTO Y2 FROM MATRIX WHERE SRNO=2;
SELECT COLUMN3 INTO Y3 FROM MATRIX WHERE SRNO=2;
SELECT COLUMN1 INTO Z1 FROM MATRIX WHERE SRNO=3;
SELECT COLUMN2 INTO Z2 FROM MATRIX WHERE SRNO=3;
SELECT COLUMN3 INTO Z3 FROM MATRIX WHERE SRNO=3;

--ROW TEST
IF X1=X2 AND X2=X3 AND NOT X1='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X1||' WINS');
ELSIF Y1=Y2 AND Y2=Y3 AND NOT Y1='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||Y1||' WINS');
ELSIF Z1=Z2 AND Z2=Z3 AND NOT Z1='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||Z1||' WINS');
--COLUMN TEST
ELSIF X1=Y1 AND Y1=Z1 AND NOT X1='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X1||' WINS');
ELSIF X2=Y2 AND Y2=Z2 AND NOT X2='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X2||' WINS');
ELSIF X3=Y3 AND Y3=Z3 AND NOT X3='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X3||' WINS');
--DIAGONAL TEST
ELSIF X1=Y2 AND Y2=Z3 AND NOT X1='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X1||' WINS');
ELSIF X3=Y2 AND Y2=Z1 AND NOT X3='_' THEN
DBMS_OUTPUT.PUT_LINE('PLAYER '||X3||' WINS');
--INCASE OF ALL FILLED CELLS (DRAW)
ELSIF(X1!='_' AND X2!='_' AND X3!='_' AND Y1!='_' AND Y2!='_' AND Y3!='_' AND Z1!='_' AND Z2!='_' AND Z3!='_' ) THEN
DBMS_OUTPUT.PUT_LINE('DRAW');
ELSE
DBMS_OUTPUT.PUT_LINE('GAME CONTINUES');
END IF;


END;
/

--DROP TRIGGER WIN;
EXECUTE PLAY('X',1,1);
EXECUTE play('O',1,2);
EXECUTE play('O',3,2);
EXECUTE play('X',3,2);
EXECUTE play('X',2,2);
EXECUTE play('X',2,1);
EXECUTE play('O',3,1);
EXECUTE play('X',1,3);
EXECUTE play('O',2,3);
EXECUTE play('X',3,3);







